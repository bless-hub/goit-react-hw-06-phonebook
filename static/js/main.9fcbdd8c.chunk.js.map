{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/container.module.css","components/ContactList/fade.module.css","components/ContactForm/Logo.module.css","components/Filter/Fadefilter.module.css","components/Container/Container.js","redux/tasks/taskActions.js","components/ContactList/ContactItem.js","components/ContactList/ContacrList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","components/Notification/Notification.js","redux/tasks/tasksReducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","style","section","addContact","createAction","name","number","payload","task","id","uuid","removeContact","changeFilter","connect","state","ownProps","item","tasks","items","find","dispatch","taskActions","type","button","onClick","contacts","filter","toLowerCase","includes","TransitionGroup","component","list","map","contact","CSSTransition","timeout","classNames","fade","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","reset","this","in","appear","unmountOnExit","logo","form","onSubmit","label","input","onChange","Component","mapDispatchToProps","onChangeFilter","length","fadeFilter","inputHeader","placeholder","App","title","message","options","closeButton","debug","newestOnTop","progressBar","positionClass","preventDuplicates","onclick","showDuration","hideDuration","timeOut","extendedTimeOut","showEasing","hideEasing","showMethod","hideMethod","notification","createReducer","action","newContact","combineReducers","store","configureStore","reducer","taskReducer","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.9fcbdd8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__14dfR\",\"item\":\"ContactList_item__3kfGK\",\"button\":\"ContactList_button__3_wVu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__239NX\",\"inputHeader\":\"Filter_inputHeader__2_A7W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"container_section__35xD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__26J_v\",\"enterActive\":\"fade_enterActive__2YqQy\",\"exit\":\"fade_exit__1uIDc\",\"exitActive\":\"fade_exitActive__3IJ5J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"Logo_appear__Sjf6W\",\"appearActive\":\"Logo_appearActive__1UcoG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"Fadefilter_appear__1KAgV\",\"appearActive\":\"Fadefilter_appearActive__vpzTD\"};","import React from \"react\";\r\nimport style from \"./container.module.css\";\r\n\r\nexport default function Container({ children }) {\r\n  return <section className={style.section}>{children}</section>;\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n// import taskTypes from \"./tasksTypes\";\r\n\r\nconst addContact = createAction(\"contact/add\", ({ name, number }) => ({\r\n  payload: {\r\n    task: {\r\n      id: uuid(),\r\n      name,\r\n      number,\r\n    },\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction(\"contact/remove\");\r\n\r\nconst changeFilter = createAction(\"contact/changeFilter\");\r\n\r\nexport default { addContact, removeContact, changeFilter };\r\n\r\n//==============До рефактора==========================\r\n// const addContact = ({ name, number }) => ({\r\n//   type: taskTypes.ADD,\r\n//   payload: {\r\n//     task: {\r\n//       id: uuid(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   },\r\n// });\r\n\r\n// const removeContact = (contactId) => ({\r\n//   type: taskTypes.REMOVE,\r\n//   payload: {\r\n//     contactId,\r\n//   },\r\n// });\r\n\r\n// const changeFilter = (filter) => ({\r\n//   type: taskTypes.CHANGE_FILTER,\r\n//   payload: {\r\n//     filter,\r\n//   },\r\n// });\r\n//==============До рефактора==========================\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport taskActions from \"../../redux/tasks/taskActions\";\r\nimport style from \"./ContactList.module.css\";\r\n\r\nfunction ContactItem({ name, number, removeContact, id }) {\r\n  return (\r\n    <li key={id} className={style.item}>\r\n      {name} {number}\r\n      <button type=\"button\" className={style.button} onClick={removeContact}>\r\n        Delete Contact\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\nContactItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const item = state.tasks.items.find((item) => item.id === ownProps.id);\r\n  return {\r\n    ...item,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  removeContact: () => dispatch(taskActions.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./ContactList.module.css\";\r\nimport ContactItem from \"./ContactItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport fade from \"./fade.module.css\";\r\n// import taskActions from \"../../redux/tasks/taskActions\";\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <>\r\n    <TransitionGroup component=\"ul\" className={style.list}>\r\n      {contacts.map((contact) => (\r\n        <CSSTransition key={contact.id} timeout={250} classNames={fade}>\r\n          <ContactItem\r\n            id={contact.id}\r\n            name={contact.name}\r\n            number={contact.number}\r\n          />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\nconst mapStateToProps = (state) => {\r\n  const visibleContacts = state.tasks.items.filter((task) =>\r\n    task.name.toLowerCase().includes(state.tasks.filter.toLowerCase())\r\n  );\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React, { Component } from \"react\";\r\nimport style from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport taskActions from \"../../redux/tasks/taskActions\";\r\nimport logo from \"./Logo.module.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={true}\r\n          appear\r\n          timeout={5000}\r\n          unmountOnExit\r\n          classNames={logo}\r\n        >\r\n          <h1>PhoneBook</h1>\r\n        </CSSTransition>\r\n        <form className={style.form} onSubmit={this.handleSubmit}>\r\n          <label className={style.label}>\r\n            Name\r\n            <input\r\n              className={style.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label className={style.label}>\r\n            Number\r\n            <input\r\n              className={style.input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className={style.button} type=\"submit\">\r\n            Add Contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: taskActions.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\n//   handleContact = (e) => {\r\n//     this.setState({ name: e.target.value });\r\n//   };\r\n\r\n//   handleNumber = (e) => {\r\n//     this.setState({ number: e.target.value });\r\n//   };\r\n","import React from \"react\";\r\nimport style from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport fadeFilter from \"./Fadefilter.module.css\";\r\nimport taskActions from \"../../redux/tasks/taskActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) => (\r\n  <>\r\n    {contacts.length > 1 && (\r\n      <CSSTransition\r\n        in={contacts.length > 1}\r\n        timeout={250}\r\n        appear\r\n        unmountOnExit\r\n        classNames={fadeFilter}\r\n      >\r\n        <div>\r\n          <p className={style.inputHeader}>Find contact by name</p>\r\n          <input\r\n            className={style.input}\r\n            type=\"text\"\r\n            value={value}\r\n            placeholder=\"find contact\"\r\n            onChange={(e) => onChangeFilter(e.target.value)}\r\n          />\r\n        </div>\r\n      </CSSTransition>\r\n    )}\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.tasks.filter,\r\n  contacts: state.tasks.items,\r\n});\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: taskActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\nimport Container from \"./components/Container/Container\";\nimport ContactList from \"./components/ContactList/ContacrList\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\n// import { v4 as uuid } from \"uuid\";\nimport Filter from \"./components/Filter/Filter\";\n// import notification from \"./components/Notification/Notification\";\n// import { CSSTransition } from \"react-transition-group\";\n// import filters from \"./filter.module.css\";\n\nexport default function App() {\n  // state = {\n  //   contacts: [],\n  //   filter: \"\",\n  // };\n\n  // componentDidMount() {\n  //   const persistedContacts = localStorage.getItem(\"contacts\");\n\n  //   if (persistedContacts) {\n  //     this.setState({\n  //       contacts: JSON.parse(persistedContacts),\n  //     });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // changeFilter = (filter) => {\n  //   this.setState({ filter });\n  // };\n\n  // addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: uuid(),\n  //     name,\n  //     number,\n  //     formErrors: {\n  //       name: \"\",\n  //       number: \"\",\n  //     },\n  //   };\n\n  //   const { contacts } = this.state;\n\n  //   this.setState((prevState) => {\n  //     return {\n  //       contacts: [contact, ...prevState.contacts],\n  //     };\n  //   });\n\n  //   const sameContact = contacts.some(\n  //     (contact) => contact.name.toLowerCase() === name.toLowerCase()\n  //   );\n\n  //   if (sameContact) {\n  //     notification();\n  //     return;\n  //   }\n  // };\n\n  // getFilter = () => {\n  //   const { filter, contacts } = this.state;\n\n  //   return contacts.filter(({ name }) =>\n  //     name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n\n  // removeContact = (contactId) => {\n  //   this.setState((prevState) => {\n  //     return {\n  //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n  //     };\n  //   });\n  // };\n\n  // render() {\n  // const { contacts, filter } = this.state;\n\n  // const visibleFilter = this.getFilter();\n\n  return (\n    <>\n      <Container title=\"PhoneBook\">\n        <ContactForm />\n      </Container>\n      <Container>\n        <Filter />\n        <ContactList />\n      </Container>\n\n      {/* <Container>\n         <Filter /> \n       <ContactList />\n       </Container> \n      <Container title=\"PhoneBook\">\n          <ContactForm addContact={this.addContact} />\n        </Container> \n\n        <Container title=\"Contacts\">\n          <Filter\n            contacts={contacts}\n            title=\"Find\"\n            value={filter}\n            onChangeFilter={this.changeFilter}\n          />\n          <ContactList\n            contacts={visibleFilter}\n            removeContact={this.removeContact}\n          />\n        </Container>  */}\n    </>\n  );\n}\n","import message from \"toastr\";\r\nimport \"toastr/build/toastr.min.css\";\r\n\r\nconst notification = () => message[\"error\"](\"Contact already exists\");\r\n\r\nmessage.options = {\r\n  closeButton: true,\r\n  debug: false,\r\n  newestOnTop: true,\r\n  progressBar: true,\r\n  positionClass: \"toast-top-right\",\r\n  preventDuplicates: false,\r\n  onclick: null,\r\n  showDuration: \"300\",\r\n  hideDuration: \"1000\",\r\n  timeOut: \"3000\",\r\n  extendedTimeOut: \"1000\",\r\n  showEasing: \"swing\",\r\n  hideEasing: \"linear\",\r\n  showMethod: \"fadeIn\",\r\n  hideMethod: \"fadeOut\",\r\n};\r\nexport default notification;\r\n","import { combineReducers } from \"redux\";\r\nimport taskActions from \"./taskActions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport notification from \"../../components/Notification/Notification\";\r\n// import tasksTypes from \"./tasksTypes\";\r\n\r\nconst addContactAction = (state, action) => {\r\n  const newContact = action.payload.task;\r\n  const notificationName = state.find(\r\n    (contact) => contact.name === newContact.name\r\n  );\r\n  if (notificationName) {\r\n    notification();\r\n  } else {\r\n    return [...state, action.payload.task];\r\n  }\r\n};\r\n\r\nconst removeContactAction = (state, action) =>\r\n  state.filter((contact) => contact.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [taskActions.addContact]: addContactAction,\r\n  [taskActions.removeContact]: removeContactAction,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [taskActions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n//==================Before Refactor===============\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case taskActions.addContact.type:\r\n//       return [...state, payload.task];\r\n\r\n//     case taskActions.removeContact.type:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case taskActions.changeFilter.type:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n//==================Before Refactor===============\r\n\r\n// const contact = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case taskAction.addContact.type:\r\n//       return [...state, payload.contact];\r\n\r\n//     case taskAction.removeContact.type:\r\n//       return state.filter((task) => task.id !== payload.contact);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case taskAction.changeFilter.type:\r\n//       return payload.contact;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({ contacts: itemReducers, filter });\r\n\r\n// state = {\r\n//     contacts: [],\r\n//     filter: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const persistedContacts = localStorage.getItem(\"contacts\");\r\n\r\n//     if (persistedContacts) {\r\n//       this.setState({\r\n//         contacts: JSON.parse(persistedContacts),\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.contacts !== this.state.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   changeFilter = (filter) => {\r\n//     this.setState({ filter });\r\n//   };\r\n\r\n//   addContact = ({ name, number }) => {\r\n//     const contact = {\r\n//       id: uuid(),\r\n//       name,\r\n//       number,\r\n//       formErrors: {\r\n//         name: \"\",\r\n//         number: \"\",\r\n//       },\r\n//     };\r\n\r\n//     const { contacts } = this.state;\r\n\r\n//     this.setState((prevState) => {\r\n//       return {\r\n//         contacts: [contact, ...prevState.contacts],\r\n//       };\r\n//     });\r\n\r\n//     const sameContact = contacts.some(\r\n//       (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n//     );\r\n\r\n//     if (sameContact) {\r\n//       notification();\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   getFilter = () => {\r\n//     const { filter, contacts } = this.state;\r\n\r\n//     return contacts.filter(({ name }) =>\r\n//       name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n//   };\r\n\r\n//   removeContact = (contactId) => {\r\n//     this.setState((prevState) => {\r\n//       return {\r\n//         contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n//       };\r\n//     });\r\n//   };\r\n","// import { createStore, combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport taskReducer from \"./tasks/tasksReducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: taskReducer,\r\n  },\r\n});\r\n\r\n// const rootReducer = combineReducers({\r\n//   tasks: taskReducer,\r\n// });\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// );\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDom.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3qxyP\",\"label\":\"ContactForm_label__2wRSM\",\"input\":\"ContactForm_input__y0Xhh\",\"button\":\"ContactForm_button__1n9VF\"};"],"sourceRoot":""}